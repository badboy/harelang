#!/bin/sh
# The purpose of this script is to generate make targets for the Hare standard
# library. If you are adding new modules to the standard library, write a
# function for that module (e.g. encoding_utf8), and call the following helper
# commands:
#
# gen_srcs module::name list.ha of.ha sources.ha
# gen_ssa module::name list of module::names yours depends on
#
# Then add your module to the list of modules at the bottom.
#
# Then run ./scripts/gen-stdlib > stdlib.mk to generate new rules.

srcdir="$(dirname "$0")"
eval ". $srcdir/gen-stdlib.sh"

all_platforms="linux
freebsd
darwin"

gensrcs_rt() {
	gen_srcs -plinux rt \
		+linux/platform_abort.ha \
		+linux/env.ha \
		+linux/errno.ha \
		+linux/types.ha \
		+linux/segmalloc.ha \
		+linux/platformstart.ha \
		+linux/prctl.ha \
		+linux/'+$(ARCH)'.ha \
		+linux/syscallno+'$(ARCH)'.ha \
		+linux/syscalls.ha \
		+linux/syscallsarch+'$(ARCH)'.ha \
		+linux/signal.ha \
		+linux/stat.ha \
		+linux/socket.ha \
		'+$(ARCH)'/jmp.ha \
		'+$(ARCH)'/backtrace.ha \
		fenv_defs.ha \
		'+$(ARCH)'/cpuid.ha \
		ensure.ha \
		jmp.ha \
		malloc.ha \
		memcpy.ha \
		memmove.ha \
		memset.ha \
		strcmp.ha \
		$*
	gen_srcs -pfreebsd rt \
		+freebsd/platform_abort.ha \
		+freebsd/env.ha \
		+freebsd/errno.ha \
		+freebsd/platformstart.ha \
		+freebsd/segmalloc.ha \
		+freebsd/signal.ha \
		+freebsd/socket.ha \
		+freebsd/syscallno.ha \
		+freebsd/syscalls.ha \
		+freebsd/types.ha \
		+'$(ARCH)'/jmp.ha \
		+'$(ARCH)'/backtrace.ha \
		fenv_defs.ha \
		+'$(ARCH)'/cpuid.ha \
		ensure.ha \
		jmp.ha \
		malloc.ha \
		memcpy.ha \
		memmove.ha \
		memset.ha \
		strcmp.ha \
		$*
	gen_srcs -pdarwin rt \
		+darwin/platform_abort.ha \
		+darwin/env.ha \
		+darwin/errno.ha \
		+darwin/platformstart.ha \
		+darwin/segmalloc.ha \
		+darwin/signal.ha \
		+darwin/socket.ha \
		+darwin/syscallno.ha \
		+darwin/syscalls.ha \
		+darwin/types.ha \
		+'$(ARCH)'/jmp.ha \
		+'$(ARCH)'/backtrace.ha \
		fenv_defs.ha \
		+'$(ARCH)'/cpuid.ha \
		ensure.ha \
		jmp.ha \
		malloc.ha \
		memcpy.ha \
		memmove.ha \
		memset.ha \
		strcmp.ha \
		$*
}

rt() {
	# This one is complicated, don't use it as a reference for other modules
	if [ $testing -eq 0 ]
	then
		printf '%s\n' 'rtscript = $(STDLIB)/rt/hare.sc'
		gensrcs_rt \
			abort.ha \
			start.ha
	else
		gensrcs_rt \
			start+test.ha \
			abort+test.ha \
			'+test/+$(PLATFORM).ha' \
			+test/cstring.ha \
			+test/run.ha \
			+test/signal.ha \
			+test/ztos.ha
	fi
	gen_ssa -plinux rt
	gen_ssa -pfreebsd rt
	gen_ssa -pdarwin rt
	cat <<EOF
\$($cache)/rt/start.o: \$(STDLIB)/rt/+\$(PLATFORM)/start+\$(ARCH)-libc.s
	@printf 'AS \t%s\n' "\$@"
	@mkdir -p \$($cache)/rt
	@\$(AS) -o \$@ \$(STDLIB)/rt/+\$(PLATFORM)/start+\$(ARCH)-libc.s

${stdlib}_asm = \$($cache)/rt/syscall.o \\
	\$($cache)/rt/setjmp.o \\
	\$($cache)/rt/longjmp.o \\
	\$($cache)/rt/restore.o \\
	\$($cache)/rt/getfp.o \\
	\$($cache)/rt/fenv.o \\
	\$($cache)/rt/start.o \\
	\$($cache)/rt/cpuid_native.o

\$($cache)/rt/syscall.o: \$(STDLIB)/rt/+\$(PLATFORM)/syscall+\$(ARCH).s
	@printf 'AS \t%s\n' "\$@"
	@mkdir -p \$($cache)/rt
	@\$(AS) -o \$@ \$(STDLIB)/rt/+\$(PLATFORM)/syscall+\$(ARCH).s

\$($cache)/rt/setjmp.o: \$(STDLIB)/rt/+\$(ARCH)/setjmp.s
	@printf 'AS \t%s\n' "\$@"
	@mkdir -p \$($cache)/rt
	@\$(AS) -o \$@ \$(STDLIB)/rt/+\$(ARCH)/setjmp.s

\$($cache)/rt/longjmp.o: \$(STDLIB)/rt/+\$(ARCH)/longjmp.s
	@printf 'AS \t%s\n' "\$@"
	@mkdir -p \$($cache)/rt
	@\$(AS) -o \$@ \$(STDLIB)/rt/+\$(ARCH)/longjmp.s

\$($cache)/rt/restore.o: \$(STDLIB)/rt/+\$(ARCH)/restore.s
	@printf 'AS \t%s\n' "\$@"
	@mkdir -p \$($cache)/rt
	@\$(AS) -o \$@ \$(STDLIB)/rt/+\$(ARCH)/restore.s

\$($cache)/rt/fenv.o: \$(STDLIB)/rt/+\$(ARCH)/fenv.s
	@printf 'AS \t%s\n' "\$@"
	@mkdir -p \$($cache)/rt
	@\$(AS) -o \$@ \$(STDLIB)/rt/+\$(ARCH)/fenv.s

\$($cache)/rt/getfp.o: \$(STDLIB)/rt/+\$(ARCH)/getfp.s
	@printf 'AS \t%s\n' "\$@"
	@mkdir -p \$($cache)/rt
	@\$(AS) -o \$@ \$(STDLIB)/rt/+\$(ARCH)/getfp.s

\$($cache)/rt/cpuid_native.o: \$(STDLIB)/rt/+\$(ARCH)/cpuid_native.s
	@printf 'AS \t%s\n' "\$@"
	@mkdir -p \$($cache)/rt
	@\$(AS) -o \$@ \$(STDLIB)/rt/+\$(ARCH)/cpuid_native.s

\$($cache)/rt/rt-linux.a: \$($cache)/rt/rt-linux.o \$(${stdlib}_asm)
	@printf 'AR \t%s\n' "\$@"
	@\$(AR) -csr \$@ \$($cache)/rt/rt-linux.o \$(${stdlib}_asm)

\$($cache)/rt/rt-freebsd.a: \$($cache)/rt/rt-freebsd.o \$(${stdlib}_asm)
	@printf 'AR \t%s\n' "\$@"
	@\$(AR) -csr \$@ \$($cache)/rt/rt-freebsd.o \$(${stdlib}_asm)

\$($cache)/rt/rt-darwin.a: \$($cache)/rt/rt-darwin.o \$(${stdlib}_asm)
	@printf 'AR \t%s\n' "\$@"
	@\$(AR) -csr \$@ \$($cache)/rt/rt-darwin.o \$(${stdlib}_asm)

${stdlib}_rt = \$($cache)/rt/rt-\$(PLATFORM).a
${stdlib}_deps_linux += \$(${stdlib}_rt)
${stdlib}_deps_freebsd += \$(${stdlib}_rt)
${stdlib}_deps_darwin += \$(${stdlib}_rt)
${stdlib}_deps_any += \$(${stdlib}_rt)

EOF
}

ascii() {
	gen_srcs ascii \
		ctype.ha \
		strcmp.ha \
		valid.ha
	gen_ssa ascii strings
}

bufio() {
	gen_srcs bufio \
		buffered.ha \
		memstream.ha \
		scanner.ha
	gen_ssa bufio io bytes strings encoding::utf8 errors types
}

bytes() {
	gen_srcs bytes \
		contains.ha \
		equal.ha \
		index.ha \
		reverse.ha \
		tokenize.ha \
		trim.ha \
		two_way.ha \
		zero.ha
	gen_ssa bytes types
}

datetime() {
	gen_srcs -plinux datetime \
		arithmetic.ha \
		chronology.ha \
		date.ha \
		datetime.ha \
		duration.ha \
		format.ha \
		parse.ha \
		period.ha \
		reckon.ha \
		time.ha \
		timezone.ha \
		virtual.ha
	gen_ssa -plinux datetime ascii errors fmt io strconv strings strio \
		time time::chrono
	gen_srcs -pfreebsd datetime \
		arithmetic.ha \
		chronology.ha \
		date.ha \
		datetime.ha \
		duration.ha \
		format.ha \
		parse.ha \
		period.ha \
		reckon.ha \
		time.ha \
		timezone.ha \
		virtual.ha
	gen_ssa -pfreebsd datetime ascii errors fmt io strconv strings strio \
		time time::chrono
	gen_srcs -pdarwin datetime \
		arithmetic.ha \
		chronology.ha \
		date.ha \
		datetime.ha \
		duration.ha \
		format.ha \
		parse.ha \
		period.ha \
		reckon.ha \
		time.ha \
		timezone.ha \
		virtual.ha
	gen_ssa -pdarwin datetime ascii errors fmt io strconv strings strio \
		time time::chrono
}

crypto() {
	if [ $testing -eq 0 ]
	then
		gen_srcs crypto \
			authenc.ha \
			keyderiv.ha
		gen_ssa crypto bufio bytes crypto::argon2 crypto::chacha \
			crypto::cihper crypto::poly1305 crypto::mac \
			crypto::math endian errors io
	else
		gen_srcs crypto \
			authenc.ha \
			keyderiv.ha \
			+test/authenc.ha
		gen_ssa crypto bytes bufio crypto::argon2 crypto::chacha \
			crypto::cihper crypto::poly1305 crypto::mac \
			crypto::math endian errors io
	fi
}

gensrcs_crypto_aes() {
	gen_srcs crypto::aes \
		aes.ha \
		aes_ct64.ha \
		block.ha \
		$*
}

crypto_aes() {
	if [ $testing -eq 0 ]
	then
		gensrcs_crypto_aes
		gen_ssa crypto::aes bytes crypto::cipher crypto::math endian \
			rt io
	else
		gensrcs_crypto_aes \
			ct64+test.ha \
			cbc+test.ha \
			ctr+test.ha \
			rt+test.ha \
			+test/gcm.ha
		gen_ssa crypto::aes bufio bytes crypto::cipher crypto::math \
			endian errors io rt
	fi
}

crypto_aes_xts() {
	if [ $testing -eq 0 ]
	then
		gen_srcs crypto::aes::xts xts.ha
	else
		gen_srcs crypto::aes::xts xts.ha +test.ha
	fi
	gen_ssa crypto::aes::xts crypto::aes crypto::cipher bytes
}

crypto_argon2() {
	if [ $testing -eq 0 ]
	then
		gen_srcs crypto::argon2 argon2.ha
		gen_ssa crypto::argon2 bufio bytes crypto::blake2b \
			crypto::math endian errors hash io rt types
	else
		gen_srcs crypto::argon2 argon2.ha +test.ha
		gen_ssa crypto::argon2 bufio bytes crypto::blake2b \
			crypto::math encoding::hex endian errors hash io rt \
			strings types
	fi
}

crypto_bcrypt() {
	if [ $testing -eq 0 ]
	then
		gen_srcs crypto::bcrypt bcrypt.ha base64.ha
	else
		gen_srcs crypto::bcrypt bcrypt.ha base64.ha +test.ha
	fi
	gen_ssa crypto::bcrypt crypto::blowfish encoding::base64 bufio io \
		crypto crypto::random errors crypto::cipher strings fmt bytes \
		strconv
}

gensrcs_crypto_blake2b() {
	gen_srcs crypto::blake2b \
		blake2b.ha \
		$*
}

crypto_blake2b() {
	if [ $testing -eq 0 ]
	then
		gensrcs_crypto_blake2b
		gen_ssa crypto::blake2b bytes crypto::math endian hash io
	else
		gensrcs_crypto_blake2b +test.ha vectors+test.ha
		gen_ssa crypto::blake2b encoding::hex fmt hash io strings \
			strio crypto::math endian bytes
	fi
}

gensrcs_crypto_blowfish() {
	gen_srcs crypto::blowfish \
		blowfish.ha \
		const.ha \
		$*
}

crypto_blowfish() {
	if [ $testing -eq 0 ]
	then
		gensrcs_crypto_blowfish
	else
		gensrcs_crypto_blowfish +test.ha
	fi
	gen_ssa crypto::blowfish bytes crypto::cipher endian
}

gensrcs_crypto_bigint() {
		gen_srcs crypto::bigint arithm.ha encoding.ha monty.ha types.ha \
            util.ha $*
}

crypto_bigint() {
	if [ $testing -eq 0 ]
	then
		gensrcs_crypto_bigint
        gen_ssa crypto::bigint bytes crypto::math
	else
		gensrcs_crypto_bigint +test/arithm.ha +test/encoding.ha \
            +test/monty.ha +test/utils.ha
        gen_ssa crypto::bigint bytes crypto::math encoding::hex
	fi
}

crypto_chacha() {
	if [ $testing -eq 0 ]
	then
		gen_srcs crypto::chacha chacha20.ha
		gen_ssa crypto::chacha bytes crypto::cipher crypto::math \
			endian io
	else
		gen_srcs crypto::chacha chacha20.ha +test.ha
		gen_ssa crypto::chacha bytes crypto::cipher crypto::math \
			endian io bufio
	fi
}

crypto_cipher() {
	gen_srcs crypto::cipher \
		cipher.ha \
		block.ha \
		cbc.ha \
		ctr.ha \
		stream.ha \
		gcm.ha \
		ghash.ha
	gen_ssa crypto::cipher crypto::math bytes endian errors io types
}

crypto_hkdf() {
	if [ $testing -eq 0 ]
	then
		gen_srcs crypto::hkdf hkdf.ha
		gen_ssa crypto::hkdf bytes crypto::hmac crypto::mac hash
	else
		gen_srcs crypto::hkdf hkdf.ha +test.ha
		gen_ssa crypto::hkdf bytes crypto::hmac crypto::mac hash \
			crypto::sha1 crypto::sha256
	fi
}

crypto_hmac() {
	if [ $testing -eq 0 ]
	then
		gen_srcs crypto::hmac \
			hmac.ha \
			sha1.ha \
			sha256.ha
		gen_ssa crypto::hmac crypto::mac crypto::sha1 crypto::sha256 hash io bytes
	else
		gen_srcs crypto::hmac \
			hmac.ha \
			sha1.ha \
			sha256.ha \
			+test.ha
		gen_ssa crypto::hmac bytes crypto::mac hash crypto::sha1 \
			crypto::sha256 encoding::hex io strings
	fi
}

crypto_mac() {
	gen_srcs crypto::mac \
		mac.ha
	gen_ssa crypto::mac io
}

crypto_math() {
	gen_srcs crypto::math \
		arithm.ha bits.ha
	gen_ssa crypto::math
}

crypto_poly1305() {
	if [ $testing -eq 0 ]
	then
		gen_srcs crypto::poly1305 \
			poly1305.ha
		gen_ssa crypto::poly1305 bytes crypto::mac endian io
	else
		gen_srcs crypto::poly1305 \
			poly1305.ha \
			+test.ha
		gen_ssa crypto::poly1305 bytes crypto::mac endian encoding::hex io
	fi
}

crypto_random() {
	gen_srcs -plinux crypto::random \
		+linux.ha \
		random.ha
	gen_ssa -plinux crypto::random rt io errors

	gen_srcs -pfreebsd crypto::random \
		+freebsd.ha \
		random.ha
	gen_ssa -pfreebsd crypto::random rt io errors

	gen_srcs -pdarwin crypto::random \
		+darwin.ha \
		random.ha
	gen_ssa -pdarwin crypto::random rt io errors
}

gensrcs_crypto_rsa() {
	gen_srcs crypto::rsa core.ha  errors.ha  keys.ha  pkcs1.ha $*
}

genssa_crypto_rsa() {
	gen_ssa crypto::rsa bufio bytes crypto::bigint crypto::math \
		crypto::sha1 crypto::sha256 crypto::sha512 endian errors hash \
		io types $*
}

crypto_rsa() {
	if [ $testing -eq 0 ]
	then
		gensrcs_crypto_rsa
		genssa_crypto_rsa
	else
		gensrcs_crypto_rsa +test/core.ha +test/keys.ha +test/pkcs1.ha
		genssa_crypto_rsa
	fi
}

crypto_salsa() {
	if [ $testing -eq 0 ]
	then
		gen_srcs crypto::salsa salsa20.ha
		gen_ssa crypto::salsa bytes crypto::cipher crypto::math endian \
			io
	else
		gen_srcs crypto::salsa salsa20.ha +test.ha
		gen_ssa crypto::salsa bytes bufio crypto::cipher crypto::math \
			endian types io
	fi
}

gensrcs_crypto_sha256() {
	gen_srcs crypto::sha256 \
		sha256.ha \
		$*
}

genssa_crypto_sha256() {
	gen_ssa crypto::sha256 crypto::math bytes hash io endian $*
}

crypto_sha256() {
	if [ $testing -eq 0 ]
	then
		gensrcs_crypto_sha256
		genssa_crypto_sha256
	else
		gensrcs_crypto_sha256 \
			+test.ha
		genssa_crypto_sha256 fmt strings encoding::hex
	fi
}

crypto_sha1() {
	if [ $testing -eq 0 ]
	then
		gen_srcs crypto::sha1 sha1.ha
		gen_ssa crypto::sha1 crypto::math bytes hash io endian
	else
		gen_srcs crypto::sha1 sha1.ha +test.ha
		gen_ssa crypto::sha1 crypto::math bytes hash endian fmt strings encoding::hex
	fi
}

crypto_sha512() {
	if [ $testing -eq 0 ]
	then
		gen_srcs crypto::sha512 sha512.ha
		gen_ssa crypto::sha512 crypto::math bytes hash io endian
	else
		gen_srcs crypto::sha512 sha512.ha +test.ha
		gen_ssa crypto::sha512 crypto::math bytes hash endian fmt strings encoding::hex
	fi
}

crypto_curve25519() {
	if [ $testing -eq 0 ]
	then
		gen_srcs crypto::curve25519 curve25519.ha
		gen_ssa crypto::curve25519 bytes
	else
		gen_srcs crypto::curve25519 curve25519.ha +test.ha
		gen_ssa crypto::curve25519 bytes fmt io encoding::hex crypto::random
	fi
}

crypto_ed25519() {
	if [ $testing -eq 0 ]
	then
		gen_srcs crypto::ed25519 ed25519.ha edwards25519.ha
		gen_ssa crypto::ed25519 bytes crypto::sha512 hash
	else
		gen_srcs crypto::ed25519 ed25519.ha edwards25519.ha +test.ha
		gen_ssa crypto::ed25519 bytes crypto::sha512 hash encoding::hex strings
	fi
}

crypto_x25519() {
	if [ $testing -eq 0 ]
	then
		gen_srcs crypto::x25519 x25519.ha
		gen_ssa crypto::x25519 crypto::curve25519
	else
		gen_srcs crypto::x25519 x25519.ha +test.ha
		gen_ssa crypto::x25519 bytes crypto::curve25519 encoding::hex \
			crypto::random
	fi
}

dirs() {
	gen_srcs dirs \
		xdg.ha
	gen_ssa dirs errors fs io os path fmt unix
}

encoding_base64() {
	gen_srcs encoding::base64 \
		base64.ha
	gen_ssa encoding::base64 ascii bufio bytes errors io os strings
}

encoding_base32() {
	gen_srcs encoding::base32 \
		base32.ha
	gen_ssa encoding::base32 ascii bufio bytes errors io strings os
}

encoding_hex() {
	gen_srcs encoding::hex \
		hex.ha
	gen_ssa encoding::hex ascii bufio bytes errors fmt io strconv strio \
		strings
}

encoding_pem() {
	if [ $testing -eq 0 ]
	then
		gen_srcs encoding::pem \
			pem.ha
		gen_ssa encoding::pem strings bufio strio io errors \
			encoding::base64 ascii os fmt
	else
		gen_srcs encoding::pem \
			pem.ha \
			+test.ha
		gen_ssa encoding::pem strings bufio strio io errors \
			encoding::base64 ascii os fmt bytes
	fi
}

encoding_utf8() {
	gen_srcs encoding::utf8 \
		decode.ha \
		decodetable.ha \
		encode.ha \
		rune.ha
	gen_ssa encoding::utf8 types
}

endian() {
	gen_srcs endian \
		big.ha \
		network.ha \
		little.ha \
		endian.ha \
		'host+$(ARCH).ha'
	gen_ssa endian
}

errors() {
	gen_srcs errors \
		common.ha \
		opaque.ha \
		string.ha \
		rt.ha
	gen_ssa errors rt
}

fmt() {
	gen_srcs fmt \
		fmt.ha
	gen_ssa fmt ascii bufio encoding::utf8 io os strconv strings types
}

fnmatch() {
	if [ $testing -eq 0 ]
	then
		gen_srcs fnmatch fnmatch.ha
	else
		gen_srcs fnmatch fnmatch.ha +test.ha
	fi
	gen_ssa fnmatch ascii errors strings sort
}

format_elf() {
	gen_srcs format::elf \
		'arch+$(ARCH).ha' \
		'platform+$(PLATFORM).ha' \
		types.ha
	gen_ssa format::elf
}

gensrcs_format_ini() {
	gen_srcs format::ini \
		scan.ha \
		types.ha \
		$*
}

format_ini() {
	if [ $testing -eq 0 ]
	then
		gensrcs_format_ini
	else
		gensrcs_format_ini +test.ha
	fi
	gen_ssa format::ini bufio encoding::utf8 fmt io strings
}

format_tar() {
	gen_srcs format::tar \
		types.ha \
		reader.ha
	gen_ssa format::tar bufio bytes endian errors io strconv strings strio
}

fs() {
	gen_srcs fs \
		types.ha \
		fs.ha \
		util.ha
	gen_ssa fs io strings path time errors
}

getopt() {
	gen_srcs getopt \
		getopts.ha
	gen_ssa getopt encoding::utf8 fmt io os strings
}

glob() {
	if [ $testing -eq 0 ]
	then
		gen_srcs glob glob.ha
	else
		gen_srcs glob glob.ha +test.ha
	fi
	gen_ssa glob fnmatch fs io os sort strings strio
}

hare_ast() {
	gen_srcs hare::ast \
		decl.ha \
		expr.ha \
		ident.ha \
		import.ha \
		type.ha \
		unit.ha
	gen_ssa hare::ast hare::lex strings
}

gensrcs_hare_types() {
	gen_srcs hare::types \
		'+$(ARCH)/hash.ha' \
		arch.ha \
		builtins.ha \
		class.ha \
		hash.ha \
		lookup.ha \
		store.ha \
		types.ha \
		$*
}

hare_types() {
	if [ $testing -eq 1 ]
	then
		gensrcs_hare_types +test.ha
		gen_ssa hare::types hare::ast hash hash::fnv endian strings \
			errors sort fmt bufio hare::lex hare::parse io
	else
		gensrcs_hare_types
		gen_ssa hare::types hare::ast hash hash::fnv endian strings \
			errors sort fmt
	fi
}

gensrcs_hare_unit() {
	gen_srcs hare::unit \
		check.ha \
		context.ha \
		errors.ha \
		expr.ha \
		process.ha \
		scan.ha \
		scope.ha \
		unit.ha \
		$*
}

hare_unit() {
	if [ $testing -eq 1 ]
	then
		gensrcs_hare_unit +test.ha
		gen_ssa hare::unit hare::ast hare::types hash hash::fnv \
			strings hare::lex bufio hare::parse
	else
		gensrcs_hare_unit
		gen_ssa hare::unit hare::ast hare::types hash hash::fnv \
			strings hare::lex
	fi
}

hare_unparse() {
	gen_srcs hare::unparse \
		expr.ha \
		decl.ha \
		ident.ha \
		import.ha \
		type.ha \
		unit.ha \
		util.ha
	gen_ssa hare::unparse fmt io strings strio hare::ast hare::lex
}

gensrcs_hare_lex() {
	gen_srcs hare::lex \
		token.ha \
		lex.ha \
		$*
}

hare_lex() {
	if [ $testing -eq 0 ]
	then
		gensrcs_hare_lex
	else
		gensrcs_hare_lex \
			+test.ha
	fi
	gen_ssa hare::lex ascii io bufio encoding::utf8 strings fmt sort strio \
		strconv path
}

hare_module() {
	gen_srcs hare::module \
		types.ha \
		context.ha \
		scan.ha \
		manifest.ha \
		walk.ha
	gen_ssa hare::module \
		hare::ast hare::lex hare::parse hare::unparse strio fs io strings hash \
		crypto::sha256 dirs bytes encoding::utf8 ascii fmt time bufio \
		strconv os encoding::hex sort errors temp path
}

gensrcs_hare_parse() {
	gen_srcs hare::parse \
		decl.ha \
		expr.ha \
		ident.ha \
		import.ha \
		parse.ha \
		type.ha \
		unit.ha \
		$*
}

hare_parse() {
	if [ $testing -eq 0 ]
	then
		gensrcs_hare_parse
		gen_ssa hare::parse ascii hare::ast hare::lex fmt types \
			strings math
	else
		gensrcs_hare_parse \
			+test/expr.ha \
			+test/ident.ha \
			+test/loc.ha \
			+test/roundtrip.ha \
			+test/types.ha \
			+test/unit.ha
		gen_ssa hare::parse ascii bufio hare::ast hare::lex \
			hare::unparse io strio fmt types strings math \
			encoding::utf8
	fi
}

hash() {
	gen_srcs hash \
		hash.ha
	gen_ssa hash crypto::math io fmt
}

hash_adler32() {
	gen_srcs hash::adler32 \
		adler32.ha
	gen_ssa hash::adler32 endian hash io strings
}

hash_crc16() {
	gen_srcs hash::crc16 \
		crc16.ha
	gen_ssa hash::crc16 endian hash io strings
}

hash_crc32() {
	gen_srcs hash::crc32 \
		crc32.ha
	gen_ssa hash::crc32 endian hash io strings
}

hash_crc64() {
	gen_srcs hash::crc64 \
		crc64.ha
	gen_ssa hash::crc64 endian hash io strings
}

hash_fnv() {
	gen_srcs hash::fnv \
		'+$(ARCH).ha' \
		fnv.ha
	gen_ssa hash::fnv endian hash io strings
}

hash_siphash() {
	if [ $testing -eq 0 ]
	then
		gen_srcs hash::siphash siphash.ha
		gen_ssa hash::siphash hash io endian crypto::math
	else
		gen_srcs hash::siphash siphash.ha +test.ha
		gen_ssa hash::siphash hash io endian crypto::math \
			fmt strio strings
	fi
}

gensrcs_io() {
	gen_srcs -plinux io \
		'arch+$(ARCH).ha' \
		+linux/file.ha \
		+linux/mmap.ha \
		+linux/platform_lock.ha \
		+linux/vector.ha \
		copy.ha \
		drain.ha \
		empty.ha \
		handle.ha \
		limit.ha \
		lock.ha \
		stream.ha \
		tee.ha \
		types.ha \
		util.ha \
		zero.ha \
		$*
	gen_srcs -pfreebsd io \
		'arch+$(ARCH).ha' \
		+freebsd/file.ha \
		+freebsd/mmap.ha \
		+freebsd/platform_lock.ha \
		+freebsd/vector.ha \
		copy.ha \
		drain.ha \
		empty.ha \
		handle.ha \
		limit.ha \
		lock.ha \
		stream.ha \
		tee.ha \
		types.ha \
		util.ha \
		zero.ha \
		$*
	gen_srcs -pdarwin io \
		'arch+$(ARCH).ha' \
		+darwin/file.ha \
		+darwin/mmap.ha \
		+darwin/platform_lock.ha \
		+darwin/vector.ha \
		copy.ha \
		drain.ha \
		empty.ha \
		handle.ha \
		limit.ha \
		lock.ha \
		stream.ha \
		tee.ha \
		types.ha \
		util.ha \
		zero.ha \
		$*
}

io() {
	if [ $testing -eq 0 ]
	then
		gensrcs_io
	else
		gensrcs_io \
			+test/limit.ha \
			+test/stream.ha
	fi
	gen_ssa -plinux io strings errors bytes rt
	gen_ssa -pfreebsd io strings errors bytes rt
	gen_ssa -pdarwin io strings errors bytes rt
}

linux() {
	gen_srcs -plinux linux \
		start.ha \
		env.ha
	gen_ssa -plinux linux format::elf rt
}

linux_keyctl() {
	gen_srcs -plinux linux::keyctl \
		keyctl.ha \
		types.ha
	gen_ssa -plinux linux::keyctl rt errors strings bytes
}

linux_timerfd() {
	gen_srcs -plinux linux::timerfd \
		timerfd.ha
	gen_ssa -plinux linux::timerfd errors rt time io endian
}

linux_vdso() {
	gen_srcs -plinux linux::vdso \
		vdso.ha
	gen_ssa -plinux linux::vdso linux strings format::elf
}

log() {
	gen_srcs -plinux log logger.ha global.ha funcs.ha silent.ha
	gen_ssa -plinux log datetime fmt io os
	gen_srcs -pfreebsd log logger.ha global.ha funcs.ha silent.ha
	gen_ssa -pfreebsd log datetime fmt io os
	gen_srcs -pdarwin log logger.ha global.ha funcs.ha silent.ha
	gen_ssa -pdarwin log datetime fmt io os
}

gensrcs_math() {
	gen_srcs math \
		math.ha \
		fenv_func.ha \
		'fenv+$(ARCH).ha' \
		floats.ha  \
		ints.ha \
		uints.ha \
		trig.ha \
		$*
}

math() {
	if [ $testing -eq 0 ]; then
		gensrcs_math
	else
		gensrcs_math \
			+test/data.ha \
			+test/math.ha \
			+test/floats.ha \
			+test/trig.ha
	fi
	gen_ssa math types rt
}

mime() {
	# This module is not built by default because gen-stdlib does not do a good
	# job of resolving @init dependency ordering issues
	gen_srcs mime \
		database.ha \
		lookup.ha \
		parse.ha \
		system.ha
	gen_ssa mime ascii errors strings hash::fnv encoding::utf8 bufio \
		fs io os fmt
}

net() {
	gen_srcs -plinux net \
		+linux.ha \
		errors.ha \
		msg.ha
	gen_ssa -plinux net io errors rt fmt slices

	gen_srcs -pfreebsd net \
		+freebsd.ha \
		errors.ha \
		msg.ha
	gen_ssa -pfreebsd net io errors rt fmt slices

	gen_srcs -pdarwin net \
		+darwin.ha \
		errors.ha \
		msg.ha
	gen_ssa -pdarwin net io errors rt fmt slices
}

net_dial() {
	gen_srcs net::dial \
		registry.ha \
		dial.ha \
		ip.ha \
		resolve.ha
	gen_ssa net::dial net net::ip net::tcp net::udp net::dns net::uri \
		crypto::random strconv strings unix::hosts
}

net_dns() {
	gen_srcs net::dns \
		decode.ha \
		error.ha \
		encode.ha \
		query.ha \
		strdomain.ha \
		types.ha
	gen_ssa net::dns ascii endian net net::udp net::ip fmt strings \
		unix::resolvconf unix::poll time errors
}

gensrcs_net_ip() {
	gen_srcs -plinux net::ip \
		+linux.ha \
		ip.ha \
		$*
	gen_srcs -pfreebsd net::ip \
		+freebsd.ha \
		ip.ha \
		$*
	gen_srcs -pdarwin net::ip \
		+darwin.ha \
		ip.ha \
		$*
}

net_ip() {
	if [ $testing -eq 0 ]
	then
		gensrcs_net_ip
	else
		gensrcs_net_ip \
			+test.ha
	fi
	gen_ssa -plinux net::ip bytes endian io strconv strings strio fmt
	gen_ssa -pfreebsd net::ip bytes endian io strconv strings strio fmt
	gen_ssa -pdarwin net::ip bytes endian io strconv strings strio fmt
}

net_tcp() {
	gen_srcs -plinux net::tcp \
		+linux.ha \
		listener.ha \
		options.ha
	gen_ssa -plinux net::tcp errors io net net::ip os rt

	gen_srcs -pfreebsd net::tcp \
		+freebsd.ha \
		listener.ha \
		options.ha
	gen_ssa -pfreebsd net::tcp errors io net net::ip os rt

	gen_srcs -pdarwin net::tcp \
		+darwin.ha \
		listener.ha \
		options.ha
	gen_ssa -pdarwin net::tcp errors io net net::ip os rt
}

net_udp() {
	gen_srcs -plinux net::udp \
		+linux.ha \
		options.ha
	gen_ssa -plinux net::udp errors net net::ip errors rt os io

	gen_srcs -pfreebsd net::udp \
		+freebsd.ha \
		options.ha
	gen_ssa -pfreebsd net::udp errors net net::ip errors rt os io

	gen_srcs -pdarwin net::udp \
		+darwin.ha \
		options.ha
	gen_ssa -pdarwin net::udp errors net net::ip errors rt os io
}

net_unix() {
	gen_srcs -plinux net::unix \
		+linux.ha \
		addr.ha \
		cmsg.ha \
		dial.ha \
		listener.ha \
		options.ha \
		socketpair.ha
	gen_ssa -plinux net::unix net errors os io strings types fmt \
		net::dial rt

	gen_srcs -pfreebsd net::unix \
		+freebsd.ha \
		addr.ha \
		cmsg.ha \
		dial.ha \
		listener.ha \
		options.ha \
		socketpair.ha
	gen_ssa -pfreebsd net::unix net errors os io strings types fmt \
		net::dial rt

	gen_srcs -pdarwin net::unix \
		+darwin.ha \
		addr.ha \
		cmsg.ha \
		dial.ha \
		listener.ha \
		options.ha \
		socketpair.ha
	gen_ssa -pdarwin net::unix net errors os io strings types fmt \
		net::dial rt
}

gensrcs_net_uri() {
	gen_srcs net::uri \
		fmt.ha \
		parse.ha \
		query.ha \
		uri.ha \
		$*
}

net_uri() {
	if [ $testing -eq 0 ]
	then
		gensrcs_net_uri
	else
		gensrcs_net_uri \
			+test.ha
	fi
	gen_ssa net::uri \
		ascii encoding::utf8 fmt io net::ip strconv strings strio
}

gensrcs_math_complex() {
	gen_srcs math::complex \
		complex.ha \
		$*
}

math_complex() {
	if [ $testing -eq 0 ]
	then
		gensrcs_math_complex
	else
		gensrcs_math_complex \
			+test.ha
	fi
	gen_ssa math::complex math
}

math_random() {
	gen_srcs math::random \
		random.ha
	gen_ssa math::random
}

os() {
	gen_srcs -plinux os \
		+linux/dirfdfs.ha \
		+linux/environ.ha \
		+linux/exit.ha \
		+linux/fs.ha \
		+linux/memory.ha \
		+linux/stdfd.ha \
		os.ha
	gen_ssa -plinux os io strings types fs encoding::utf8 bytes bufio \
		errors math

	gen_srcs -pfreebsd os \
		+freebsd/environ.ha \
		+freebsd/exit.ha \
		+freebsd/dirfdfs.ha \
		+freebsd/stdfd.ha \
		+freebsd/fs.ha \
		os.ha
	gen_ssa -pfreebsd os io strings types fs encoding::utf8 bytes bufio errors

	gen_srcs -pdarwin os \
		+darwin/environ.ha \
		+darwin/exit.ha \
		+darwin/dirfdfs.ha \
		+darwin/stdfd.ha \
		+darwin/fs.ha \
		os.ha
	gen_ssa -pdarwin os io strings types fs encoding::utf8 bytes bufio errors
}

os_exec() {
	gen_srcs -plinux os::exec \
		exec+linux.ha \
		process+linux.ha \
		types.ha \
		cmd.ha
	gen_ssa -plinux os::exec os strings fmt errors unix rt io ascii \
		unix::signal

	gen_srcs -pfreebsd os::exec \
		exec+freebsd.ha \
		process+freebsd.ha \
		types.ha \
		cmd.ha
	gen_ssa -pfreebsd os::exec os strings fmt errors unix rt io ascii

	gen_srcs -pdarwin os::exec \
		exec+darwin.ha \
		process+darwin.ha \
		types.ha \
		cmd.ha
	gen_ssa -pdarwin os::exec os strings fmt errors unix rt io ascii \
		unix::signal
}

path() {
	gen_srcs path \
		'+$(PLATFORM).ha' \
		buffer.ha \
		error.ha \
		stack.ha \
		ext_stack.ha \
		posix.ha \
		prefix.ha \
		iter.ha
	gen_ssa path strings bytes errors
}

regex() {
	if [ $testing -eq 0 ]; then
		gen_srcs regex regex.ha
		gen_ssa regex ascii bufio encoding::utf8 errors io strconv \
			strings bufio
	else
		gen_srcs regex regex.ha +test.ha
		gen_ssa regex encoding::utf8 errors strconv strings fmt io os bufio
	fi
}

gensrcs_strconv() {
	gen_srcs strconv \
		types.ha \
		itos.ha \
		utos.ha \
		stou.ha \
		stoi.ha \
		numeric.ha \
		ftos.ha \
		stof.ha \
		stof_data.ha \
		$*
}

gensrcs_shlex() {
	gen_srcs shlex \
		escape.ha \
		split.ha \
		$*
}

shlex() {
	if [ $testing -eq 0 ]
	then
		gensrcs_shlex
	else
		gensrcs_shlex \
			+test.ha
	fi
	gen_ssa shlex ascii encoding::utf8 io strings strio
}

slices() {
	gen_srcs slices \
		cap.ha \
		reverse.ha \
		trunc.ha \
		void.ha
	gen_ssa slices types rt
}

gensrcs_sort() {
	gen_srcs sort \
		bisect.ha \
		search.ha \
		sort.ha \
		types.ha \
		$*
}

sort() {
	if [ $testing -eq 0 ]
	then
		gensrcs_sort
	else
		gensrcs_sort \
			+test.ha
	fi
	gen_ssa sort strings types
}

strconv() {
	if [ $testing -eq 0 ]
	then
		gensrcs_strconv
	else
		gensrcs_strconv \
			+test/stou.ha \
			+test/stoi.ha
	fi
	gen_ssa strconv types strings ascii math bytes encoding::utf8
}

strings() {
	gen_srcs strings \
		cap.ha \
		concat.ha \
		contains.ha \
		cstrings.ha \
		dup.ha \
		iter.ha \
		runes.ha \
		sub.ha \
		suffix.ha \
		tokenize.ha \
		utf8.ha \
		index.ha \
		trim.ha \
		compare.ha \
		pad.ha \
		replace.ha
	gen_ssa strings bytes encoding::utf8 types
}

strings_template() {
	gen_srcs strings::template \
		template.ha
	gen_ssa strings::template ascii errors fmt io strings strio
}

strio() {
	gen_srcs strio \
		stream.ha \
		ops.ha
	gen_ssa strio errors io strings slices encoding::utf8
}

temp() {
	gen_srcs -plinux temp +linux.ha
	gen_ssa -plinux temp \
		crypto::random encoding::hex errors fs io os path strio fmt

	gen_srcs -pfreebsd temp +freebsd.ha
	gen_ssa -pfreebsd temp \
		crypto::random encoding::hex errors fs io os path strio fmt

	gen_srcs -pdarwin temp +darwin.ha
	gen_ssa -pdarwin temp \
		crypto::random encoding::hex errors fs io os path strio fmt
}

function time() {
	gen_srcs -plinux time \
		+linux/functions.ha \
		+linux/+'$(ARCH)'.ha \
		arithm.ha \
		conv.ha \
		types.ha
	gen_ssa -plinux time \
		linux::vdso math
	gen_srcs -pfreebsd time \
		+freebsd/functions.ha \
		arithm.ha \
		conv.ha \
		types.ha
	gen_ssa -pfreebsd time \
		math
	gen_srcs -pdarwin time \
		+darwin/functions.ha \
		arithm.ha \
		conv.ha \
		types.ha
	gen_ssa -pdarwin time \
		math
}

time_chrono() {
	gen_srcs -plinux time::chrono \
		arithmetic.ha \
		+linux.ha \
		chronology.ha \
		error.ha \
		leapsec.ha \
		timescale.ha \
		timezone.ha \
		tzdb.ha
	gen_ssa -plinux time::chrono \
		bufio bytes encoding::utf8 endian errors fmt fs io os strconv strings time path
	gen_srcs -pfreebsd time::chrono \
		arithmetic.ha \
		+freebsd.ha \
		chronology.ha \
		error.ha \
		leapsec.ha \
		timescale.ha \
		timezone.ha \
		tzdb.ha
	gen_ssa -pfreebsd time::chrono \
		bufio bytes encoding::utf8 endian errors fmt fs io os strconv strings time path
	gen_srcs -pdarwin time::chrono \
		arithmetic.ha \
		+darwin.ha \
		chronology.ha \
		error.ha \
		leapsec.ha \
		timescale.ha \
		timezone.ha \
		tzdb.ha
	gen_ssa -pdarwin time::chrono \
		bufio bytes encoding::utf8 endian errors fmt fs io os strconv strings time path
}

types() {
	gen_srcs types \
		limits.ha \
		classes.ha \
		'arch+$(ARCH).ha'
	gen_ssa types
}

unix() {
	gen_srcs -plinux unix \
		+linux/nice.ha \
		+linux/pipe.ha \
		+linux/umask.ha \
		+linux/getuid.ha \
		+linux/setuid.ha \
		+linux/groups.ha
	gen_ssa -plinux unix errors fs io

	gen_srcs -pfreebsd unix \
		+freebsd/nice.ha \
		+freebsd/pipe.ha \
		+freebsd/umask.ha \
		+freebsd/getuid.ha \
		+freebsd/setuid.ha \
		+freebsd/groups.ha
	gen_ssa -pfreebsd unix errors fs io

	gen_srcs -pdarwin unix \
		+darwin/nice.ha \
		+darwin/pipe.ha \
		+darwin/umask.ha \
		+darwin/getuid.ha \
		+darwin/setuid.ha \
		+darwin/groups.ha
	gen_ssa -pdarwin unix errors fs io
}

unix_hosts() {
	gen_srcs -plinux unix::hosts \
		+linux.ha \
		lookup.ha
	gen_ssa -plinux unix::hosts os io bufio net::ip strings

	gen_srcs -pfreebsd unix::hosts \
		+freebsd.ha \
		lookup.ha
	gen_ssa -pfreebsd unix::hosts os io bufio net::ip strings

	gen_srcs -pdarwin unix::hosts \
		+darwin.ha \
		lookup.ha
	gen_ssa -pdarwin unix::hosts os io bufio net::ip strings
}

unix_passwd() {
	gen_srcs unix::passwd \
		group.ha \
		passwd.ha \
		types.ha
	gen_ssa unix::passwd bufio io os strconv strings
}

unix_poll() {
	gen_srcs -plinux unix::poll +linux.ha types.ha
	gen_ssa -plinux unix::poll rt errors time io

	gen_srcs -pfreebsd unix::poll +freebsd.ha types.ha
	gen_ssa -pfreebsd unix::poll rt errors time io

	gen_srcs -pdarwin unix::poll +darwin.ha types.ha
	gen_ssa -pdarwin unix::poll rt errors time io
}

unix_resolvconf() {
	gen_srcs -plinux unix::resolvconf \
		+linux.ha \
		load.ha
	gen_ssa -plinux unix::resolvconf os io bufio net::ip strings

	gen_srcs -pfreebsd unix::resolvconf \
		+freebsd.ha \
		load.ha
	gen_ssa -pfreebsd unix::resolvconf os io bufio net::ip strings

	gen_srcs -pdarwin unix::resolvconf \
		+darwin.ha \
		load.ha
	gen_ssa -pdarwin unix::resolvconf os io bufio net::ip strings
}

unix_signal() {
	gen_srcs -plinux unix::signal \
		types.ha \
		+linux.ha
	gen_ssa -plinux unix::signal io errors rt

	gen_srcs -pdarwin unix::signal \
		types.ha \
		+darwin.ha
	gen_ssa -pdarwin unix::signal io errors rt
}

unix_tty() {
	gen_srcs -plinux unix::tty \
		types.ha \
		pty.ha \
		+linux/isatty.ha \
		+linux/open.ha \
		+linux/pty.ha \
		+linux/termios.ha \
		+linux/winsize.ha
	gen_ssa -plinux unix::tty bufio errors fmt fs io os rt strings

	gen_srcs -pfreebsd unix::tty \
		types.ha \
		pty.ha \
		+freebsd/isatty.ha \
		+freebsd/open.ha \
		+freebsd/pty.ha \
		+freebsd/winsize.ha
	gen_ssa -pfreebsd unix::tty bufio errors fmt fs io os rt strings

	gen_srcs -pdarwin unix::tty \
		types.ha \
		pty.ha \
		+darwin/isatty.ha \
		+darwin/open.ha \
		+darwin/pty.ha \
		+darwin/winsize.ha
	gen_ssa -pdarwin unix::tty bufio errors fmt fs io os rt strings
}

uuid() {
	gen_srcs uuid \
		uuid.ha
	gen_ssa uuid crypto::random strio fmt endian io bytes bufio strings strconv
}

# List of modules and their supported platforms. Place a tab between the module
# and its platform list, and spaces between each supported platform. Omitting
# the platform list implies all platforms are supported.
modules="ascii
bufio
bytes
crypto
crypto::aes
crypto::aes::xts
crypto::argon2
crypto::bcrypt
crypto::blake2b
crypto::blowfish
crypto::bigint
crypto::chacha
crypto::cipher
crypto::hkdf
crypto::hmac
crypto::mac
crypto::math
crypto::random	linux freebsd darwin
crypto::rsa
crypto::poly1305
crypto::salsa
crypto::sha1
crypto::sha256
crypto::sha512
crypto::curve25519
crypto::ed25519
crypto::x25519
datetime	linux freebsd darwin
dirs
encoding::base64
encoding::base32
encoding::hex
encoding::pem
encoding::utf8
endian
errors
fmt
fnmatch
format::elf
format::ini
format::tar
fs
getopt
glob
hare::ast
hare::lex
hare::module
hare::parse
hare::types
hare::unit
hare::unparse
hash
hash::adler32
hash::crc16
hash::crc32
hash::crc64
hash::fnv
hash::siphash
io			linux freebsd darwin
linux			linux
linux::keyctl		linux
linux::timerfd	linux
linux::vdso		linux
log	linux freebsd darwin
math
math::complex
math::random
net			linux freebsd darwin
net::dial
net::dns
net::ip			linux freebsd darwin
net::tcp		linux freebsd darwin
net::udp		linux freebsd darwin
net::unix		linux freebsd darwin
net::uri
os			linux freebsd darwin
os::exec		linux freebsd darwin
path
regex
shlex
slices
sort
strconv
strings
strings::template
strio
temp			linux freebsd darwin
time			linux freebsd darwin
time::chrono	linux freebsd darwin
types
unix			linux freebsd darwin
unix::hosts	linux freebsd darwin
unix::passwd
unix::poll		linux freebsd darwin
unix::resolvconf	linux freebsd darwin
unix::signal		linux darwin
unix::tty		linux freebsd darwin
uuid"
stdlib() {
	rt
	IFS="
"
	for module in $modules; do
		unset IFS
		if [ -z "$(echo "$module" | cut -sf1)" ]
		then
			gen_lib "$module"
		else
			platforms="$(echo "$module" | cut -sf2-)"
			module="$(echo "$module" | cut -sf1)"
			for platform in $platforms
			do
				gen_lib -p "$platform" "$module"
			done
		fi
		IFS="
"
	done
	IFS="
"
	for module in $modules; do
		unset IFS
		if [ -n "$(echo "$module" | cut -sf1)" ]
		then
			module="$(echo "$module" | cut -sf1)"
		fi
		"$(mod_file "$module")"
		IFS="
"
	done
	unset IFS
}

if [ ${DOCS:-0} -ne 1 ]
then
	printf '# This file is generated by the gen-stdlib script, do not edit it by hand\n\n'
	genrules
	genrules test
fi
